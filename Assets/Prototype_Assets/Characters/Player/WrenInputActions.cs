//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Prototype_Assets/Characters/Player/WrenInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WrenInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WrenInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WrenInputActions"",
    ""maps"": [
        {
            ""name"": ""WrenMovement"",
            ""id"": ""13eb538d-fd5d-41ac-af5b-460f3ce00d56"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""bca2ca66-67b5-41e9-aacd-6de84c6fd8ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""VerticalMovement"",
                    ""id"": ""56c1fd42-4ad0-4caf-afb7-e9ad6261dbba"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d8174a28-4da3-4b19-87da-a019ccb729d4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7d82ee09-0ce7-4c7c-8670-11c3088b4b09"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""HorizontalMovement"",
                    ""id"": ""33716d4a-d6df-49bd-9df6-ad8544179f9c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""095fe035-45e8-4a96-98d3-29a5ff2a5904"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e84d075c-6d19-4a07-aeed-0bce2bcce9c2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c6435320-6829-4767-8f3f-fc2667c43181"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WrenMovement
        m_WrenMovement = asset.FindActionMap("WrenMovement", throwIfNotFound: true);
        m_WrenMovement_Movement = m_WrenMovement.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WrenMovement
    private readonly InputActionMap m_WrenMovement;
    private List<IWrenMovementActions> m_WrenMovementActionsCallbackInterfaces = new List<IWrenMovementActions>();
    private readonly InputAction m_WrenMovement_Movement;
    public struct WrenMovementActions
    {
        private @WrenInputActions m_Wrapper;
        public WrenMovementActions(@WrenInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_WrenMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_WrenMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WrenMovementActions set) { return set.Get(); }
        public void AddCallbacks(IWrenMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_WrenMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WrenMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IWrenMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IWrenMovementActions instance)
        {
            if (m_Wrapper.m_WrenMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWrenMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_WrenMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WrenMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WrenMovementActions @WrenMovement => new WrenMovementActions(this);
    public interface IWrenMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
